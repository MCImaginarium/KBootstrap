tasks.whenTaskAdded {
    if (it.name.startsWith('publish')) it.dependsOn 'preparePublication'
}

group = 'pw.prok'
version = '0.0.8'

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

configurations {
    compile.extendsFrom exported
}

repositories {
    jcenter()
}

dependencies {
    ['api', 'spi', 'impl', 'util', 'transport-http', 'transport-wagon', 'connector-basic'].each { i ->
        exported "org.eclipse.aether:aether-${i}:1.0.2.v20150114"
    }
    exported 'org.apache.maven:maven-aether-provider:3.3.3'
    exported 'commons-cli:commons-cli:1.3'
    exported 'org.slf4j:slf4j-simple:1.6.2'
}

task appJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.exported.collect { it.directory ? it : zipTree(it) } }
    classifier = 'app'
    manifest.attributes['Main-Class'] = 'pw.prok.bootstrap.Main'
}

task signJars(type: Sign, dependsOn: [jar, appJar, 'generatePomFileForMavenPublication']) {
    sign jar
    sign appJar
}

task signPom(type: Sign, dependsOn: 'generatePomFileForMavenPublication') {
	outputs.upToDateWhen { false }
    sign file("${buildDir}/publications/maven/pom-default.xml")
}

task preparePublication(dependsOn: [signJars, signPom]) {}

def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedApp = allFiles.find { it.name.contains('-app') }
    def signedJar = (allFiles - [signedApp])[0]
    return [
            [archive: signedApp, classifier: 'app', extension: 'jar.asc'],
            [archive: signedJar, classifier: null, extension: 'jar.asc']
    ]
}

def getPomSignature = {
    return project.tasks.signPom.signatureFiles.collect { it }[0]
}

publishing {
    repositories {
        maven {
            name 'ProK'
            url 'https://prok.pw/repo/'
            credentials  {
                username project.hasProperty('prokRepoUsername') ? prokRepoUsername : null
                password project.hasProperty('prokRepoPassword') ? prokRepoPassword : null
            }
        }
    }

    publications {
        maven(MavenPublication) {
            getSignatureFiles().each { signature ->
                artifact(signature.archive) {
                    classifier = signature.classifier
                    extension = signature.extension
                }
            }
            artifact(getPomSignature()) {
                classifier = null
                extension = 'pom.asc'
            }
            from components.java
            artifact appJar

            runtimeDependencies.each {
                if (it.groupId == null) runtimeDependencies.remove it
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'KImagine'
                    description 'Bootstrap for install & run minecraft servers'
                    url 'https://prok.pw/gitlab/Prototik/KBootstrap'
                    scm {
                        url 'https://prok.pw/gitlab/Prototik/KBootstrap'
                        connection 'https://prok.pw/gitlab/Prototik/KBootstrap.git'
                        developerConnection 'gitlab@prok.pw:Prototik/KBootstrap.git'
                    }
                    licenses {
                        license {
                            name 'MIT License'
                            url 'https://prok.pw/gitlab/Prototik/KBootstrap/raw/master/LICENCE'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'Prototik'
                            name 'Sergey Shatunov'
                            email 'me@prok.pw'
                        }
                    }
                }
            }
        }
    }
}
